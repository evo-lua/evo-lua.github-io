"use strict";(self.webpackChunkevo_lua_github_io=self.webpackChunkevo_lua_github_io||[]).push([[320],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return p}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),m=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=m(e.components);return r.createElement(l.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),g=m(t),p=a,d=g["".concat(l,".").concat(p)]||g[p]||s[p]||i;return t?r.createElement(d,o(o({ref:n},c),{},{components:t})):r.createElement(d,o({ref:n},c))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=g;var u={};for(var l in n)hasOwnProperty.call(n,l)&&(u[l]=n[l]);u.originalType=e,u.mdxType="string"==typeof e?e:a,o[1]=u;for(var m=2;m<i;m++)o[m]=t[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},5640:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return u},metadata:function(){return m},toc:function(){return s}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],u={},l="Command-line Arguments",m={unversionedId:"how-to-guides/command-line-arguments",id:"how-to-guides/command-line-arguments",title:"Command-line Arguments",description:"Learn how to pass command-line arguments to your application",source:"@site/docs/how-to-guides/command-line-arguments.md",sourceDirName:"how-to-guides",slug:"/how-to-guides/command-line-arguments",permalink:"/docs/how-to-guides/command-line-arguments",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/how-to-guides/command-line-arguments.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How-to Guides",permalink:"/docs/category/how-to-guides"},next:{title:"Background Information",permalink:"/docs/background-information/"}},c={},s=[{value:"Forwarding CLI Arguments",id:"forwarding-cli-arguments",level:2},{value:"Receiving CLI Arguments",id:"receiving-cli-arguments",level:2},{value:"Accessing the C Arguments Vector",id:"accessing-the-c-arguments-vector",level:2},{value:"Accessing the Runtime Path",id:"accessing-the-runtime-path",level:2}],g={toc:s};function p(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"command-line-arguments"},"Command-line Arguments"),(0,i.kt)("p",null,"Learn how to pass command-line arguments to your application"),(0,i.kt)("h2",{id:"forwarding-cli-arguments"},"Forwarding CLI Arguments"),(0,i.kt)("p",null,"You can provide additional arguments after the  ",(0,i.kt)("inlineCode",{parentName:"p"},"--")," separator when invoking the runtime:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"evo myApp.lua -- cli args go here\n")),(0,i.kt)("h2",{id:"receiving-cli-arguments"},"Receiving CLI Arguments"),(0,i.kt)("p",null,"Scripts can fetch the arguments passed after ",(0,i.kt)("inlineCode",{parentName:"p"},"--")," via Lua's ",(0,i.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/5.2.html"},"varargs")," operator:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title=myApp.lua",title:"myApp.lua"},'local arguments = { ... }\n\nprint("Number of command-line arguments received:", #arguments)\n\nprint("Dumping command-line arguments...")\ndump(commandLineArguments)\n\nprint("Iterating over command-line arguments...")\nfor index, argument in pairs(arguments) do\n    print(index, argument)\nend\n')),(0,i.kt)("p",null,"Expected output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'Number of command-line arguments received:     4\nDumping command-line arguments...\n{ "cli", "args", "go", "here" }\nIterating over command-line arguments...\n1       cli\n2       args\n3       go\n4       here\n')),(0,i.kt)("h2",{id:"accessing-the-c-arguments-vector"},"Accessing the C Arguments Vector"),(0,i.kt)("p",null,"If you need the full ",(0,i.kt)("inlineCode",{parentName:"p"},"argv")," array as received by the runtime, read the standard global array ",(0,i.kt)("inlineCode",{parentName:"p"},"arg"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title=receiving-command-line-arguments.lua",title:"receiving-command-line-arguments.lua"},'local commandLineArguments = { ... }\n\nprint("Number of command-line arguments received:", #commandLineArguments)\n\nprint("Dumping command line arguments (only those after the -- delimiter)...")\ndump(commandLineArguments)\n\n-- Alternatively, access the full arguments vector (argv in C) passed to the runtime\nprint("Dumping command line arguments (the full C arguments vector)...")\nprint("Full arguments count:", #arg)\ndump(arg)\n')),(0,i.kt)("p",null,"This array includes all arguments, including those in front of the ",(0,i.kt)("inlineCode",{parentName:"p"},"--")," delimiter. Running the above:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"evo receiving-command-line-options.lua --main ignored.lua -- cli args go here\n")),(0,i.kt)("p",null,"The output shows the full list of arguments, including those already processed by the runtime:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'Number of command-line arguments received:     4\nDumping command line arguments (only those after the -- delimiter)...\n{ "cli", "args", "go", "here" }\nDumping command line arguments (the full C arguments vector)...\nFull arguments count:     8\n{ "receiving-command-line-options.lua", "--main", "ignored.lua", "--", "cli", "args", "go", "here" }\n')),(0,i.kt)("h2",{id:"accessing-the-runtime-path"},"Accessing the Runtime Path"),(0,i.kt)("p",null,"The executable name isn't present in the arguments vector. To retrieve it, you can use libuv instead:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title=read-executable-path.lua",title:"read-executable-path.lua"},'local libuv = require("uv")\nprint("The executable running this script is located here:", libuv.exepath())\n')),(0,i.kt)("p",null,"The result will depend on where you've placed the ",(0,i.kt)("inlineCode",{parentName:"p"},"evo")," binary on your system:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"The executable running this script is located here:     C:\\evo-lua\\evo.exe\n")))}p.isMDXComponent=!0}}]);