"use strict";(self.webpackChunkevo_lua_github_io=self.webpackChunkevo_lua_github_io||[]).push([[4906],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>c});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),s=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=s(a),h=r,c=d["".concat(o,".").concat(h)]||d[h]||u[h]||i;return a?n.createElement(c,p(p({ref:t},m),{},{components:a})):n.createElement(c,p({ref:t},m))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,p=new Array(i);p[0]=h;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[d]="string"==typeof e?e:r,p[1]=l;for(var s=2;s<i;s++)p[s]=a[s];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},624:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>p,default:()=>b,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const i={},p="path",l={unversionedId:"references/api/libraries/path",id:"references/api/libraries/path",title:"path",description:"Lua port of the NodeJS path library",source:"@site/docs/references/api/libraries/path.md",sourceDirName:"references/api/libraries",slug:"/references/api/libraries/path",permalink:"/docs/references/api/libraries/path",draft:!1,editUrl:"https://github.com/evo-lua/evo-lua.github.io/edit/main/docs/references/api/libraries/path.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"console",permalink:"/docs/references/api/libraries/console"},next:{title:"transform",permalink:"/docs/references/api/libraries/transform"}},o={},s=[{value:"Status",id:"status",level:2},{value:"Availability",id:"availability",level:2},{value:"Functions",id:"functions",level:2},{value:"path.basename",id:"pathbasename",level:3},{value:"path.dirname",id:"pathdirname",level:3},{value:"path.extname",id:"pathextname",level:3},{value:"path.isAbsolute",id:"pathisabsolute",level:3},{value:"path.join",id:"pathjoin",level:3},{value:"path.normalize",id:"pathnormalize",level:3},{value:"path.relative",id:"pathrelative",level:3},{value:"path.resolve",id:"pathresolve",level:3},{value:"Tables",id:"tables",level:2},{value:"path.posix",id:"pathposix",level:3},{value:"path.win32",id:"pathwin32",level:3},{value:"Changelog",id:"changelog",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},d=m("Stable"),u=m("Function"),h=m("Parameters"),c=m("Parameter"),y=m("Returns"),k=m("Return"),f={toc:s},v="wrapper";function b(e){let{components:t,...a}=e;return(0,r.kt)(v,(0,n.Z)({},f,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"path"},"path"),(0,r.kt)("p",null,"Lua port of the ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/api/path.html"},"NodeJS path library")),(0,r.kt)("h2",{id:"status"},"Status"),(0,r.kt)(d,{mdxType:"Stable"}),(0,r.kt)("h2",{id:"availability"},"Availability"),(0,r.kt)("p",null,"This module is preloaded. You can simply ",(0,r.kt)("inlineCode",{parentName:"p"},"require")," it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local path = require("path")\n')),(0,r.kt)("p",null,"It's also available as a ",(0,r.kt)("a",{parentName:"p",href:"/docs/references/api/globals#path"},"global alias"),"."),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"pathbasename"},"path.basename"),(0,r.kt)("p",null,"Returns the filename and extension of the given ",(0,r.kt)("inlineCode",{parentName:"p"},"fileSystemPath")," (ignoring trailing separators), similar to the Unix ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Basename"},"basename")," command."),(0,r.kt)("p",null,"If an extension is also given, the matched component (case-sensitive) will be stripped from the result before returning it."),(0,r.kt)(u,{mdxType:"Function"},(0,r.kt)(h,{mdxType:"Parameters"},(0,r.kt)(c,{name:"fileSystemPath",type:"string",mdxType:"Parameter"}),(0,r.kt)(c,{name:"extensionToRemove",type:"string",optional:!0,mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(k,{name:"basename",type:"string",mdxType:"Return"}))),(0,r.kt)("h3",{id:"pathdirname"},"path.dirname"),(0,r.kt)("p",null,"Returns the directory path of the given ",(0,r.kt)("inlineCode",{parentName:"p"},"fileSystemPath")," (ignoring trailing separators), similar to the Unix ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Dirname"},"dirname")," command."),(0,r.kt)(u,{mdxType:"Function"},(0,r.kt)(h,{mdxType:"Parameters"},(0,r.kt)(c,{name:"fileSystemPath",type:"string",mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(k,{name:"dirname",type:"string",mdxType:"Return"}))),(0,r.kt)("h3",{id:"pathextname"},"path.extname"),(0,r.kt)("p",null,"Returns the file extension of the given ",(0,r.kt)("inlineCode",{parentName:"p"},"fileSystemPath"),". This is an empty string if the given file has no extension (or is a directory)."),(0,r.kt)(u,{mdxType:"Function"},(0,r.kt)(h,{mdxType:"Parameters"},(0,r.kt)(c,{name:"fileSystemPath",type:"string",mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(k,{name:"extname",type:"string",mdxType:"Return"}))),(0,r.kt)("h3",{id:"pathisabsolute"},"path.isAbsolute"),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the given ",(0,r.kt)("inlineCode",{parentName:"p"},"fileSystemPath")," is an absolute (fully-qualified) path, and ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,r.kt)(u,{mdxType:"Function"},(0,r.kt)(h,{mdxType:"Parameters"},(0,r.kt)(c,{name:"fileSystemPath",type:"string",mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(k,{name:"isAbsolutePath",type:"boolean",mdxType:"Return"}))),(0,r.kt)("h3",{id:"pathjoin"},"path.join"),(0,r.kt)("p",null,"Returns the normalized ",(0,r.kt)("inlineCode",{parentName:"p"},"fileSystemPath")," constructed from the given path segments and the platform-specific path separator."),(0,r.kt)(u,{mdxType:"Function"},(0,r.kt)(h,{mdxType:"Parameters"},(0,r.kt)(c,{varargs:!0,mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(k,{name:"normalizedFileSystemPath",type:"string",mdxType:"Return"}))),(0,r.kt)("h3",{id:"pathnormalize"},"path.normalize"),(0,r.kt)("p",null,"Returns the normalized ",(0,r.kt)("inlineCode",{parentName:"p"},"fileSystemPath")," after resolving ",(0,r.kt)("inlineCode",{parentName:"p"},".")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"..")," segments. Preserves trailing separators, but removes duplicates."),(0,r.kt)(u,{mdxType:"Function"},(0,r.kt)(h,{mdxType:"Parameters"},(0,r.kt)(c,{name:"fileSystemPath",type:"string",mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(k,{name:"normalizedFileSystemPath",type:"string",mdxType:"Return"}))),(0,r.kt)("h3",{id:"pathrelative"},"path.relative"),(0,r.kt)("p",null,"Returns the relative path from ",(0,r.kt)("inlineCode",{parentName:"p"},"from")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"to")," based on the current working directory."),(0,r.kt)(u,{mdxType:"Function"},(0,r.kt)(h,{mdxType:"Parameters"},(0,r.kt)(c,{name:"from",type:"string",mdxType:"Parameter"}),(0,r.kt)(c,{name:"to",type:"string",mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(k,{name:"relativeFileSystemPath",type:"string",mdxType:"Return"}))),(0,r.kt)("h3",{id:"pathresolve"},"path.resolve"),(0,r.kt)("p",null,"Returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"fileSystemPath")," constructed by resolving a sequence of paths (or path segments) to create an absolute path."),(0,r.kt)("p",null,"This is conceptually similar to running a sequence of ",(0,r.kt)("inlineCode",{parentName:"p"},"cd")," commands and writing down the end result (i.e., where you landed)."),(0,r.kt)(u,{mdxType:"Function"},(0,r.kt)(h,{mdxType:"Parameters"},(0,r.kt)(c,{varargs:!0,mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(k,{name:"absoluteResolvedFileSystemPath",type:"string",mdxType:"Return"}))),(0,r.kt)("h2",{id:"tables"},"Tables"),(0,r.kt)("h3",{id:"pathposix"},"path.posix"),(0,r.kt)("p",null,"POSIX-specific version that is preloaded automatically on Linux and Mac OS, but can be accessed explicitly on Windows."),(0,r.kt)("p",null,"That is to say, if you're on Linux (or Mac OS) then ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," is always equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"path.posix"),", but you can still use the ",(0,r.kt)("inlineCode",{parentName:"p"},"path.win32")," APIs."),(0,r.kt)("h3",{id:"pathwin32"},"path.win32"),(0,r.kt)("p",null,"Windows-specific version that is preloaded automatically on Windows, but can be accessed explicitly on other platforms."),(0,r.kt)("p",null,"That is to say, if you're on Windows then ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," is always equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"path.win32"),", but you can still use the ",(0,r.kt)("inlineCode",{parentName:"p"},"path.posix")," APIs."),(0,r.kt)("h2",{id:"changelog"},"Changelog"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Version"),(0,r.kt)("th",{parentName:"tr",align:"center"},"What happened?"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"v0.0.1"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Initial release")))))}b.isMDXComponent=!0}}]);