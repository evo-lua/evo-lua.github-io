"use strict";(self.webpackChunkevo_lua_github_io=self.webpackChunkevo_lua_github_io||[]).push([[1058],{3905:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>u});var a=i(7294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function s(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,a,n=function(e,t){if(null==e)return{};var i,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var o=a.createContext({}),p=function(e){var t=a.useContext(o),i=t;return e&&(i="function"==typeof e?e(t):s(s({},t),e)),i},d=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},_="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var i=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),_=p(i),c=n,u=_["".concat(o,".").concat(c)]||_[c]||m[c]||r;return i?a.createElement(u,s(s({ref:t},d),{},{components:i})):a.createElement(u,s({ref:t},d))}));function u(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=i.length,s=new Array(r);s[0]=c;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[_]="string"==typeof e?e:n,s[1]=l;for(var p=2;p<r;p++)s[p]=i[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,i)}c.displayName="MDXCreateElement"},7446:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>v,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=i(7462),n=(i(7294),i(3905));const r={},s="stbi",l={unversionedId:"references/api/bindings/stbi",id:"references/api/bindings/stbi",title:"stbi",description:"LuaJIT bindings for the embedded stbi library",source:"@site/docs/references/api/bindings/stbi.md",sourceDirName:"references/api/bindings",slug:"/references/api/bindings/stbi",permalink:"/docs/references/api/bindings/stbi",draft:!1,editUrl:"https://github.com/evo-lua/evo-lua.github.io/edit/main/docs/references/api/bindings/stbi.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"regex",permalink:"/docs/references/api/bindings/regex"},next:{title:"stduuid",permalink:"/docs/references/api/bindings/stduuid"}},o={},p=[{value:"Status",id:"status",level:2},{value:"Availability",id:"availability",level:2},{value:"Fields",id:"fields",level:2},{value:"cdefs",id:"cdefs",level:3},{value:"bindings",id:"bindings",level:3},{value:"Functions",id:"functions",level:2},{value:"initialize",id:"initialize",level:3},{value:"replace_pixel_color_rgba",id:"replace_pixel_color_rgba",level:3},{value:"version",id:"version",level:3},{value:"Native Bindings",id:"native-bindings",level:2},{value:"stbi_abgr_to_rgba",id:"stbi_abgr_to_rgba",level:3},{value:"stbi_flip_vertically_on_write",id:"stbi_flip_vertically_on_write",level:3},{value:"stbi_image_info",id:"stbi_image_info",level:3},{value:"stbi_load_image",id:"stbi_load_image",level:3},{value:"stbi_load_rgb",id:"stbi_load_rgb",level:3},{value:"stbi_load_rgba",id:"stbi_load_rgba",level:3},{value:"stbi_load_monochrome",id:"stbi_load_monochrome",level:3},{value:"stbi_load_monochrome_with_alpha",id:"stbi_load_monochrome_with_alpha",level:3},{value:"stbi_image_free",id:"stbi_image_free",level:3},{value:"stbi_encode_bmp",id:"stbi_encode_bmp",level:3},{value:"stbi_encode_png",id:"stbi_encode_png",level:3},{value:"stbi_encode_jpg",id:"stbi_encode_jpg",level:3},{value:"stbi_encode_tga",id:"stbi_encode_tga",level:3},{value:"stbi_get_required_bmp_size",id:"stbi_get_required_bmp_size",level:3},{value:"stbi_get_required_png_size",id:"stbi_get_required_png_size",level:3},{value:"stbi_get_required_jpg_size",id:"stbi_get_required_jpg_size",level:3},{value:"stbi_get_required_tga_size",id:"stbi_get_required_tga_size",level:3},{value:"stbi_version",id:"stbi_version",level:3},{value:"Changelog",id:"changelog",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",t)},_=d("FFI"),m=d("External"),c=d("Function"),u=d("Parameters"),b=d("Parameter"),g=d("Struct"),h=d("Member"),f={toc:p},k="wrapper";function v(e){let{components:t,...i}=e;return(0,n.kt)(k,(0,a.Z)({},f,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"stbi"},"stbi"),(0,n.kt)("p",null,"LuaJIT bindings for the embedded ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/nothings/stb/tree/master"},"stbi")," library"),(0,n.kt)(_,{mdxType:"FFI"}),(0,n.kt)("h2",{id:"status"},"Status"),(0,n.kt)(m,{mdxType:"External"}),(0,n.kt)("h2",{id:"availability"},"Availability"),(0,n.kt)("p",null,"This module is preloaded. You can simply ",(0,n.kt)("inlineCode",{parentName:"p"},"require")," it:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},'local stbi = require("stbi")\n')),(0,n.kt)("h2",{id:"fields"},"Fields"),(0,n.kt)("h3",{id:"cdefs"},"cdefs"),(0,n.kt)("p",null,"A string representing the C type definitions that were used to load the FFI bindings. Do not attempt to ",(0,n.kt)("inlineCode",{parentName:"p"},"ffi.load")," them manually."),(0,n.kt)("h3",{id:"bindings"},"bindings"),(0,n.kt)("p",null,"A pointer to the statically-loaded exports table that exposes the bound functions to Lua. For more details, see ",(0,n.kt)("a",{parentName:"p",href:"/docs/background-information/luajit/static-ffi-bindings"},"this note"),"."),(0,n.kt)("h2",{id:"functions"},"Functions"),(0,n.kt)("h3",{id:"initialize"},"initialize"),(0,n.kt)("p",null,"Initializes the bindings by loading the ",(0,n.kt)("a",{parentName:"p",href:"#cdefs"},"C type definitions"),". Automatically called by the runtime when it sets up the Lua environment"),(0,n.kt)("h3",{id:"replace_pixel_color_rgba"},"replace_pixel_color_rgba"),(0,n.kt)("p",null,"Replaces all pixels using the RGBA values from ",(0,n.kt)("inlineCode",{parentName:"p"},"sourceColor")," with those from ",(0,n.kt)("inlineCode",{parentName:"p"},"replacementColor"),". Accepts ",(0,n.kt)("inlineCode",{parentName:"p"},"cdata")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"table")," values."),(0,n.kt)("p",null,"The pixel format used by the given ",(0,n.kt)("inlineCode",{parentName:"p"},"image")," is expected to be in RGBA format; use ",(0,n.kt)("a",{parentName:"p",href:"#stbi_load_rgba"},"stbi_load_rgba")," to ensure this is always the case."),(0,n.kt)(c,{since:"v0.0.19",mdxType:"Function"},(0,n.kt)(u,{mdxType:"Parameters"},(0,n.kt)(b,{name:"image",type:"stbi_image_t",mdxType:"Parameter"}),(0,n.kt)(b,{name:"sourceColor",type:"stbi_color_t",mdxType:"Parameter"}),(0,n.kt)(b,{name:"replacementColor",type:"stbi_color_t",mdxType:"Parameter"}))),(0,n.kt)(g,{name:"stbi_image_t",mdxType:"Struct"},(0,n.kt)(h,{name:"width",type:"int",mdxType:"Member"}),(0,n.kt)(h,{name:"height",type:"int",mdxType:"Member"}),(0,n.kt)(h,{name:"data",type:"stbi_color_t*",mdxType:"Member"}),(0,n.kt)(h,{name:"channels",type:"int",mdxType:"Member"})),(0,n.kt)(g,{name:"stbi_color_t",mdxType:"Struct"},(0,n.kt)(h,{name:"red",type:"uint8_t",mdxType:"Member"}),(0,n.kt)(h,{name:"green",type:"uint8_t",mdxType:"Member"}),(0,n.kt)(h,{name:"blue",type:"uint8_t",mdxType:"Member"}),(0,n.kt)(h,{name:"alpha",type:"uint8_t",mdxType:"Member"})),(0,n.kt)("h3",{id:"version"},"version"),(0,n.kt)("p",null,"Returns the embedded stbi library version as a Lua string."),(0,n.kt)("h2",{id:"native-bindings"},"Native Bindings"),(0,n.kt)("p",null,"All C functions listed here can be accessed via ",(0,n.kt)("inlineCode",{parentName:"p"},"stbi.bindings")," and must be called with the appropriate ",(0,n.kt)("inlineCode",{parentName:"p"},"cdata")," values."),(0,n.kt)("h3",{id:"stbi_abgr_to_rgba"},"stbi_abgr_to_rgba"),(0,n.kt)("p",null,"Converts the pixel format of an ",(0,n.kt)("inlineCode",{parentName:"p"},"image")," from ABGR to RGBA (and vice versa), by swapping the first and last byte of each pixel."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"void stbi_abgr_to_rgba(stbi_image_t* image)\n")),(0,n.kt)(c,{since:"v0.0.10",mdxType:"Function"}),(0,n.kt)("h3",{id:"stbi_flip_vertically_on_write"},"stbi_flip_vertically_on_write"),(0,n.kt)("p",null,"Globally toggles the vertical direction that is used when encoding images. A non-zero flag means that the pixel data is inverted."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"void stbi_flip_vertically_on_write(int flag);\n")),(0,n.kt)("h3",{id:"stbi_image_info"},"stbi_image_info"),(0,n.kt)("p",null,"Retrieves the metadata for the given image, without actually decoding the pixel buffer or performing color depth conversions."),(0,n.kt)("p",null,"The resulting ",(0,n.kt)("inlineCode",{parentName:"p"},"image")," will have no pixels (",(0,n.kt)("inlineCode",{parentName:"p"},"data")," member), so don't pass it to any of the other functions that expect a full image struct."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"bool stbi_image_info(stbi_readonly_file_contents_t buffer, const size_t file_size, stbi_image_t* image);\n")),(0,n.kt)("h3",{id:"stbi_load_image"},"stbi_load_image"),(0,n.kt)("p",null,"Loads the given buffer containing the file contents, which must be a supported image format, and returns the image as a ",(0,n.kt)("inlineCode",{parentName:"p"},"cdata")," struct."),(0,n.kt)("p",null,"The original color depth remains unchanged, i.e., no conversions are performed while loading the image."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"bool stbi_load_image(stbi_readonly_file_contents_t buffer, const size_t file_size, stbi_image_t* image);\n")),(0,n.kt)("h3",{id:"stbi_load_rgb"},"stbi_load_rgb"),(0,n.kt)("p",null,"Loads the given buffer containing the file contents, which must be a supported image format, and returns the image as a ",(0,n.kt)("inlineCode",{parentName:"p"},"cdata")," struct."),(0,n.kt)("p",null,"The pixel data is converted while loading the image, so that all pixels are in RGB format (no transparency)."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"bool stbi_load_rgb(stbi_readonly_file_contents_t buffer, const size_t file_size, stbi_image_t* image);\n")),(0,n.kt)("h3",{id:"stbi_load_rgba"},"stbi_load_rgba"),(0,n.kt)("p",null,"Loads the given buffer containing the file contents, which must be a supported image format, and returns the image as a ",(0,n.kt)("inlineCode",{parentName:"p"},"cdata")," struct."),(0,n.kt)("p",null,"The pixel data is converted while loading the image, so that all pixels are in RGBA format (with transparency)."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"bool stbi_load_rgba(stbi_readonly_file_contents_t buffer, const size_t file_size, stbi_image_t* image);\n")),(0,n.kt)("h3",{id:"stbi_load_monochrome"},"stbi_load_monochrome"),(0,n.kt)("p",null,"Loads the given buffer containing the file contents, which must be a supported image format, and returns the image as a ",(0,n.kt)("inlineCode",{parentName:"p"},"cdata")," struct."),(0,n.kt)("p",null,"The pixel data is converted while loading the image, so that all pixels are in monochrome format (no transparency)."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"bool stbi_load_monochrome(stbi_readonly_file_contents_t buffer, const size_t file_size, stbi_image_t* image);\n")),(0,n.kt)("h3",{id:"stbi_load_monochrome_with_alpha"},"stbi_load_monochrome_with_alpha"),(0,n.kt)("p",null,"Loads the given buffer containing the file contents, which must be a supported image format, and returns the image as a ",(0,n.kt)("inlineCode",{parentName:"p"},"cdata")," struct."),(0,n.kt)("p",null,"The pixel data is converted while loading the image, so that all pixels are in monochrome format (with transparency)."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"bool stbi_load_monochrome_with_alpha(stbi_readonly_file_contents_t buffer, const size_t file_size, stbi_image_t* image);\n")),(0,n.kt)("h3",{id:"stbi_image_free"},"stbi_image_free"),(0,n.kt)("p",null,"Releases the given ",(0,n.kt)("inlineCode",{parentName:"p"},"image")," struct's pixel buffer. This must be called manually, since the pixel buffers are allocated dynamically in stbi."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"bool stbi_image_free(stbi_image_t* image);\n")),(0,n.kt)("h3",{id:"stbi_encode_bmp"},"stbi_encode_bmp"),(0,n.kt)("p",null,"Encodes the given ",(0,n.kt)("inlineCode",{parentName:"p"},"image")," as a ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/BMP_file_format"},"BMP")," file and stores the result in the provided buffer, which you can pre-allocate using ",(0,n.kt)("a",{parentName:"p",href:"#stbi_get_required_bmp_size"},"stbi_get_required_bmp_size"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"size_t stbi_encode_bmp(stbi_image_t* image, uint8_t* buffer, const size_t buffer_size);\n")),(0,n.kt)("h3",{id:"stbi_encode_png"},"stbi_encode_png"),(0,n.kt)("p",null,"Encodes the given ",(0,n.kt)("inlineCode",{parentName:"p"},"image")," as a ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/PNG"},"PNG")," file and stores the result in the provided buffer, which you can pre-allocate using ",(0,n.kt)("a",{parentName:"p",href:"#stbi_get_required_png_size"},"stbi_get_required_png_size"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"size_t stbi_encode_png(stbi_image_t* image, uint8_t* buffer, const size_t buffer_size, const int stride);\n")),(0,n.kt)("h3",{id:"stbi_encode_jpg"},"stbi_encode_jpg"),(0,n.kt)("p",null,"Encodes the given ",(0,n.kt)("inlineCode",{parentName:"p"},"image")," as a ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/JPEG"},"JPG")," file and stores the result in the provided buffer, which you can pre-allocate using ",(0,n.kt)("a",{parentName:"p",href:"#stbi_get_required_jpg_size"},"stbi_get_required_jpg_size"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"size_t stbi_encode_jpg(stbi_image_t* image, uint8_t* buffer, const size_t buffer_size, int quality);\n")),(0,n.kt)("h3",{id:"stbi_encode_tga"},"stbi_encode_tga"),(0,n.kt)("p",null,"Encodes the given ",(0,n.kt)("inlineCode",{parentName:"p"},"image")," as a ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Truevision_TGA"},"TGA")," file and stores the result in the provided buffer, which you can pre-allocate using ",(0,n.kt)("a",{parentName:"p",href:"#stbi_get_required_tga_size"},"stbi_get_required_tga_size"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"size_t stbi_encode_tga(stbi_image_t* image, uint8_t* buffer, const size_t buffer_size);\n")),(0,n.kt)("h3",{id:"stbi_get_required_bmp_size"},"stbi_get_required_bmp_size"),(0,n.kt)("p",null,"Returns the number of bytes required to encode the given ",(0,n.kt)("inlineCode",{parentName:"p"},"image")," in BMP format."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"You can use this for (pre-)allocating buffers, but keep in mind that this is still somewhat wasteful as it's effectively encoding the image once just to compute the size, before actually encoding and writing to a buffer the second time around. Depending on the image data you may be able to cache this; i.e., compute the size once and then use the same size/buffer repeatedly.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"size_t stbi_get_required_bmp_size(stbi_image_t* image)\n")),(0,n.kt)("h3",{id:"stbi_get_required_png_size"},"stbi_get_required_png_size"),(0,n.kt)("p",null,"Returns the number of bytes required to encode the given ",(0,n.kt)("inlineCode",{parentName:"p"},"image")," in PNG format."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"You can use this for (pre-)allocating buffers, but keep in mind that this is still somewhat wasteful as it's effectively encoding the image once just to compute the size, before actually encoding and writing to a buffer the second time around. Depending on the image data you may be able to cache this; i.e., compute the size once and then use the same size/buffer repeatedly.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"size_t stbi_get_required_png_size(stbi_image_t* image, const int stride)\n")),(0,n.kt)("h3",{id:"stbi_get_required_jpg_size"},"stbi_get_required_jpg_size"),(0,n.kt)("p",null,"Returns the number of bytes required to encode the given ",(0,n.kt)("inlineCode",{parentName:"p"},"image")," in JPG format."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"You can use this for (pre-)allocating buffers, but keep in mind that this is still somewhat wasteful as it's effectively encoding the image once just to compute the size, before actually encoding and writing to a buffer the second time around. Depending on the image data you may be able to cache this; i.e., compute the size once and then use the same size/buffer repeatedly.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"size_t stbi_get_required_jpg_size(stbi_image_t* image, int quality)\n")),(0,n.kt)("h3",{id:"stbi_get_required_tga_size"},"stbi_get_required_tga_size"),(0,n.kt)("p",null,"Returns the number of bytes required to encode the given ",(0,n.kt)("inlineCode",{parentName:"p"},"image")," in TGA format."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"You can use this for (pre-)allocating buffers, but keep in mind that this is still somewhat wasteful as it's effectively encoding the image once just to compute the size, before actually encoding and writing to a buffer the second time around. Depending on the image data you may be able to cache this; i.e., compute the size once and then use the same size/buffer repeatedly.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"size_t stbi_get_required_tga_size(stbi_image_t* image)\n")),(0,n.kt)("h3",{id:"stbi_version"},"stbi_version"),(0,n.kt)("p",null,"Returns the embedded stbi library version as a ",(0,n.kt)("inlineCode",{parentName:"p"},"cdata")," string."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"const char* stbi_version(void);\n")),(0,n.kt)("h2",{id:"changelog"},"Changelog"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"center"},"Version"),(0,n.kt)("th",{parentName:"tr",align:"center"},"What happened?"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"v0.0.19"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Added ",(0,n.kt)("inlineCode",{parentName:"td"},"replace_pixel_color_rgba"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"v0.0.10"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Added ",(0,n.kt)("inlineCode",{parentName:"td"},"stbi_abgr_to_rgba"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"v0.0.9"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Removed ",(0,n.kt)("inlineCode",{parentName:"td"},"stbi_max_bitmap_size")," in favor of ",(0,n.kt)("inlineCode",{parentName:"td"},"stbi_get_required_bmp_size"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"stbi_get_required_png_size"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"stbi_get_required_jpg_size"),", and ",(0,n.kt)("inlineCode",{parentName:"td"},"stbi_get_required_tga_size"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"v0.0.7"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Added ",(0,n.kt)("inlineCode",{parentName:"td"},"stbi_flip_vertically_on_write"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"v0.0.4"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Initial release")))))}v.isMDXComponent=!0}}]);