"use strict";(self.webpackChunkevo_lua_github_io=self.webpackChunkevo_lua_github_io||[]).push([[9900],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=m(n),k=r,c=d["".concat(p,".").concat(k)]||d[k]||u[k]||i;return n?a.createElement(c,o(o({ref:t},s),{},{components:n})):a.createElement(c,o({ref:t},s))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=k;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var m=2;m<i;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},1626:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>b,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const i={},o="miniz",l={unversionedId:"references/api/bindings/miniz",id:"references/api/bindings/miniz",title:"miniz",description:"Lua bindings for the embedded miniz library",source:"@site/docs/references/api/bindings/miniz.md",sourceDirName:"references/api/bindings",slug:"/references/api/bindings/miniz",permalink:"/docs/references/api/bindings/miniz",draft:!1,editUrl:"https://github.com/evo-lua/evo-lua.github.io/edit/main/docs/references/api/bindings/miniz.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"json",permalink:"/docs/references/api/bindings/json"},next:{title:"openssl",permalink:"/docs/references/api/bindings/openssl"}},p={},m=[{value:"Status",id:"status",level:2},{value:"Availability",id:"availability",level:2},{value:"Compression Levels",id:"compression-levels",level:2},{value:"Compressor Flags",id:"compressor-flags",level:2},{value:"Deflator",id:"deflator",level:2},{value:"deflate",id:"deflate",level:3},{value:"Inflator",id:"inflator",level:2},{value:"inflate",id:"inflate",level:3},{value:"ZipFileReader",id:"zipfilereader",level:2},{value:"extract",id:"extract",level:3},{value:"get_filename",id:"get_filename",level:3},{value:"get_num_files",id:"get_num_files",level:3},{value:"get_offset",id:"get_offset",level:3},{value:"is_directory",id:"is_directory",level:3},{value:"locate_file",id:"locate_file",level:3},{value:"stat",id:"stat",level:3},{value:"ZipFileWriter",id:"zipfilewriter",level:2},{value:"add",id:"add",level:3},{value:"add_from_zip",id:"add_from_zip",level:3},{value:"finalize",id:"finalize",level:3},{value:"Functions",id:"functions",level:2},{value:"adler32",id:"adler32",level:3},{value:"crc32",id:"crc32",level:3},{value:"compress",id:"compress",level:3},{value:"deflate",id:"deflate-1",level:3},{value:"inflate",id:"inflate-1",level:3},{value:"last_error",id:"last_error",level:3},{value:"new_deflator",id:"new_deflator",level:3},{value:"new_inflator",id:"new_inflator",level:3},{value:"new_reader",id:"new_reader",level:3},{value:"new_reader_memory",id:"new_reader_memory",level:3},{value:"new_writer",id:"new_writer",level:3},{value:"uncompress",id:"uncompress",level:3},{value:"version",id:"version",level:3},{value:"Changelog",id:"changelog",level:2}],s=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},d=s("External"),u=s("Function"),k=s("Parameters"),c=s("Parameter"),y=s("Returns"),f=s("Return"),h=s("Struct"),g=s("Member"),v={toc:m},T="wrapper";function b(e){let{components:t,...n}=e;return(0,r.kt)(T,(0,a.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"miniz"},"miniz"),(0,r.kt)("p",null,"Lua bindings for the embedded ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/richgel999/miniz"},"miniz")," library"),(0,r.kt)("h2",{id:"status"},"Status"),(0,r.kt)(d,{mdxType:"External"}),(0,r.kt)("h2",{id:"availability"},"Availability"),(0,r.kt)("p",null,"This module is preloaded. You can simply ",(0,r.kt)("inlineCode",{parentName:"p"},"require")," it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local miniz = require("miniz")\n')),(0,r.kt)("h2",{id:"compression-levels"},"Compression Levels"),(0,r.kt)("p",null,"Whenever you compress data, you can optionally pass a ",(0,r.kt)("inlineCode",{parentName:"p"},"compressionLevel"),", which must be a ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," value:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'The minimum compression level is zero (meaning "no compression")'),(0,r.kt)("li",{parentName:"ul"},'The highest supported level is nine (meaning "maximum compression")'),(0,r.kt)("li",{parentName:"ul"},"If you don't pass a ",(0,r.kt)("inlineCode",{parentName:"li"},"compressionLevel"),", the maximum compression level of nine will be used")),(0,r.kt)("p",null,"If you pass invalid values, you may get an error or the input may silently be clamped to the nearest possible value."),(0,r.kt)("h2",{id:"compressor-flags"},"Compressor Flags"),(0,r.kt)("p",null,"Many methods accept an optional ",(0,r.kt)("inlineCode",{parentName:"p"},"flags")," parameter. By setting a nonzero value, you can control advanced compression options such as \"write ZIP archives with a zlib-compatible header\". Since they aren't part of the Lua bindings, this page doesn't attempt to list them all."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can find out what flags are currently supported by reading the source comments in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/richgel999/miniz/blob/master/miniz.h"},"miniz header")," file.")),(0,r.kt)("h2",{id:"deflator"},"Deflator"),(0,r.kt)("p",null,"Created by ",(0,r.kt)("a",{parentName:"p",href:"#new_deflator"},"new_deflator"),". You can use this to compress large amounts of data, or smaller chunks that simply aren't available all at once."),(0,r.kt)("h3",{id:"deflate"},"deflate"),(0,r.kt)("p",null,"Applies ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Deflate"},"DEFLATE")," to the given ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," and returns the compressed bytes as a Lua string."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"For advanced use cases, you may control the flushing behavior of the compressor with an additional ",(0,r.kt)("inlineCode",{parentName:"p"},"flushingBehavior")," flag:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Supported values are ",(0,r.kt)("inlineCode",{parentName:"li"},'"no"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"partial"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"sync"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"full"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"finish"'),", and ",(0,r.kt)("inlineCode",{parentName:"li"},'"block"')),(0,r.kt)("li",{parentName:"ul"},"The default value is ",(0,r.kt)("inlineCode",{parentName:"li"},'"no"'),", i.e., no flushing of the compressor is enforced (useful for stream compression)"),(0,r.kt)("li",{parentName:"ul"},"For additional details and potential use cases, see ",(0,r.kt)("a",{parentName:"li",href:"https://www.bolet.org/~pornin/deflate-flush.html"},"this zlib-specific documentation")," explaining the modes")),(0,r.kt)("p",{parentName:"admonition"},"Most of the time, you'll want to pass ",(0,r.kt)("inlineCode",{parentName:"p"},'"no"')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'"finish"')," for asynchronous and synchronous compression, respectively.")),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"self",type:"Deflator",mdxType:"Parameter"}),(0,r.kt)(c,{name:"input",type:"string",mdxType:"Parameter"}),(0,r.kt)(c,{name:"flushingBehavior",type:"string",optional:!0,mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"compressedInput",type:"string",mdxType:"Return"}))),(0,r.kt)("h2",{id:"inflator"},"Inflator"),(0,r.kt)("p",null,"Created by ",(0,r.kt)("a",{parentName:"p",href:"#new_inflator"},"new_inflator"),". You can use this to decompress large amounts of data, or smaller chunks that simply aren't available all at once."),(0,r.kt)("h3",{id:"inflate"},"inflate"),(0,r.kt)("p",null,"Applies ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Deflate#Decoder/decompressor"},"INFLATE")," to the given (DEFLATE-compressed) ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," and returns the decompressed bytes as a Lua string."),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"self",type:"Inflator",mdxType:"Parameter"}),(0,r.kt)(c,{name:"input",type:"string",mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"decompressedInput",type:"string",mdxType:"Return"}))),(0,r.kt)("h2",{id:"zipfilereader"},"ZipFileReader"),(0,r.kt)("p",null,"Created by ",(0,r.kt)("a",{parentName:"p",href:"#new_reader"},"new_reader")," or ",(0,r.kt)("a",{parentName:"p",href:"#new_reader_memory"},"new_reader_memory"),". You can use this to get information about the files within a ZIP archive or to extract them (in-memory)."),(0,r.kt)("h3",{id:"extract"},"extract"),(0,r.kt)("p",null,"Extracts the file referenced by the given ",(0,r.kt)("inlineCode",{parentName:"p"},"fileTableIndex")," and returns the file contents (or ",(0,r.kt)("inlineCode",{parentName:"p"},'""')," on failure). The ",(0,r.kt)("inlineCode",{parentName:"p"},"flags")," are passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"miniz")," directly. Since the extraction happens entirely in memory, this method may not be well-suited for extracting very large files."),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"self",type:"ZipFileReader",mdxType:"Parameter"}),(0,r.kt)(c,{name:"fileTableIndex",type:"number",mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"decompressedFileContents",type:"string",mdxType:"Return"}))),(0,r.kt)("h3",{id:"get_filename"},"get_filename"),(0,r.kt)("p",null,"Returns the file name referenced by the given ",(0,r.kt)("inlineCode",{parentName:"p"},"fileTableIndex"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," and an error message if the given index was invalid."),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"self",type:"ZipFileReader",mdxType:"Parameter"}),(0,r.kt)(c,{name:"fileTableIndex",type:"number",mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"filePath",type:"string",optional:!0,mdxType:"Return"}),(0,r.kt)(f,{name:"errorMessage",type:"string",optional:!0,mdxType:"Return"}))),(0,r.kt)("h3",{id:"get_num_files"},"get_num_files"),(0,r.kt)("p",null,"Returns the total number of files within the ZIP archive. This is the maximum ",(0,r.kt)("inlineCode",{parentName:"p"},"fileTableIndex")," that you can pass to other functions."),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"self",type:"ZipFileReader",mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"fileCount",type:"number",optional:!0,mdxType:"Return"}))),(0,r.kt)("h3",{id:"get_offset"},"get_offset"),(0,r.kt)("p",null,"Returns the starting offset (from the beginning of the file) of the ZIP archive."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This offset is likely zero for normal archives, but the file format allows storing arbitrary data before the beginning of the ZIP header.")),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"self",type:"ZipFileReader",mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"startingOffset",type:"number",optional:!0,mdxType:"Return"}))),(0,r.kt)("h3",{id:"is_directory"},"is_directory"),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the entry referenced by the given ",(0,r.kt)("inlineCode",{parentName:"p"},"fileTableIndex")," is a directory entry, and ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"self",type:"ZipFileReader",mdxType:"Parameter"}),(0,r.kt)(c,{name:"fileTableIndex",type:"number",mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"isDirectoryEntry",type:"boolean",mdxType:"Return"}))),(0,r.kt)("h3",{id:"locate_file"},"locate_file"),(0,r.kt)("p",null,"Searches the internal file system table of the given ZIP archive for an entry that matches ",(0,r.kt)("inlineCode",{parentName:"p"},"fileSystemPath")," and returns the corresponding ",(0,r.kt)("inlineCode",{parentName:"p"},"fileTableIndex"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," and an error message if no match was found. It uses a simple linear search method that might have to iterate over the entire table, which is slow for very large files. The ",(0,r.kt)("inlineCode",{parentName:"p"},"flags")," passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"miniz")," can control the way that the search is performed."),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"fileSystemPath",type:"string",mdxType:"Parameter"}),(0,r.kt)(c,{name:"flags",type:"number",optional:!0,mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"fileTableIndex",type:"number",mdxType:"Return"}))),(0,r.kt)("h3",{id:"stat"},"stat"),(0,r.kt)("p",null,"Returns a list of attributes for the entry referenced by the given ",(0,r.kt)("inlineCode",{parentName:"p"},"fileTableIndex"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," and an error message if the index was invalid."),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"self",type:"ZipFileReader",mdxType:"Parameter"}),(0,r.kt)(c,{name:"fileTableIndex",type:"number",mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"stats",type:"ZipArchiveFileStatistics",optional:!0,mdxType:"Return"}),(0,r.kt)(f,{name:"errorMessage",type:"string",optional:!0,mdxType:"Return"}))),(0,r.kt)(h,{name:"ZipArchiveFileStatistics",mdxType:"Struct"},(0,r.kt)(g,{name:"index",type:"number",mdxType:"Member"}),(0,r.kt)(g,{name:"version_made_by",type:"number",mdxType:"Member"}),(0,r.kt)(g,{name:"version_needed",type:"number",mdxType:"Member"}),(0,r.kt)(g,{name:"bit_flag",type:"number",mdxType:"Member"}),(0,r.kt)(g,{name:"method",type:"number",mdxType:"Member"}),(0,r.kt)(g,{name:"time",type:"number",mdxType:"Member"}),(0,r.kt)(g,{name:"crc32",type:"number",mdxType:"Member"}),(0,r.kt)(g,{name:"comp_size",type:"number",mdxType:"Member"}),(0,r.kt)(g,{name:"uncomp_size",type:"number",mdxType:"Member"}),(0,r.kt)(g,{name:"internal_attr",type:"number",mdxType:"Member"}),(0,r.kt)(g,{name:"external_attr",type:"number",mdxType:"Member"}),(0,r.kt)(g,{name:"filename",type:"string",mdxType:"Member"}),(0,r.kt)(g,{name:"comment",type:"string",mdxType:"Member"})),(0,r.kt)("h2",{id:"zipfilewriter"},"ZipFileWriter"),(0,r.kt)("p",null,"Created by ",(0,r.kt)("a",{parentName:"p",href:"#new_writer"},"new_writer"),". You can use this to add files to a ZIP archive or to save the in-memory data to disk."),(0,r.kt)("h3",{id:"add"},"add"),(0,r.kt)("p",null,"Adds (in-memory) a new file entry referenced by ",(0,r.kt)("inlineCode",{parentName:"p"},"fileSystemPath")," with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"fileContents")," to the archive. The ",(0,r.kt)("inlineCode",{parentName:"p"},"flags")," passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"miniz")," control the compression level and settings for this specific entry; it's a bitfield with the level being stored in the lowest byte."),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"self",type:"ZipFileWriter",mdxType:"Parameter"}),(0,r.kt)(c,{name:"fileSystemPath",type:"string",mdxType:"Parameter"}),(0,r.kt)(c,{name:"fileContents",type:"string",mdxType:"Parameter"}))),(0,r.kt)("h3",{id:"add_from_zip"},"add_from_zip"),(0,r.kt)("p",null,"Adds (in-memory) the contents of the entry referenced by the given ",(0,r.kt)("inlineCode",{parentName:"p"},"fileTableIndex")," from another ZIP archive to the archive."),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"self",type:"ZipFileWriter",mdxType:"Parameter"}),(0,r.kt)(c,{name:"reader",type:"ZipFileReader",mdxType:"Parameter"}),(0,r.kt)(c,{name:"fileTableIndex",type:"number",mdxType:"Parameter"}))),(0,r.kt)("h3",{id:"finalize"},"finalize"),(0,r.kt)("p",null,"Finishes the current archive, adding the necessary structures to make it a valid and complete ZIP file. Then, returns the file contents."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Once the archive has been finalized, you can no longer add new entries to it. You'd usually do this before saving the file to disk.")),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"self",type:"ZipFileWriter",mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"zipFileContents",type:"string",mdxType:"Return"}))),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"adler32"},"adler32"),(0,r.kt)("p",null,"Returns the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Adler-32"},"Adler-32")," checksum for the given ",(0,r.kt)("inlineCode",{parentName:"p"},"input"),". Supplying an ",(0,r.kt)("inlineCode",{parentName:"p"},"initialValue")," allows processing multiple chunks as they arrive."),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"input",type:"string",mdxType:"Parameter"}),(0,r.kt)(c,{name:"initialValue",type:"string",optional:!0,mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"checksum",type:"string",mdxType:"Return"}))),(0,r.kt)("h3",{id:"crc32"},"crc32"),(0,r.kt)("p",null,"Returns the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Cyclic_redundancy_check"},"CRC-32")," checksum for the given ",(0,r.kt)("inlineCode",{parentName:"p"},"input"),". Supplying an ",(0,r.kt)("inlineCode",{parentName:"p"},"initialValue")," allows processing multiple chunks as they arrive."),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"input",type:"string",mdxType:"Parameter"}),(0,r.kt)(c,{name:"initialValue",type:"string",optional:!0,mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"checksum",type:"string",mdxType:"Return"}))),(0,r.kt)("h3",{id:"compress"},"compress"),(0,r.kt)("p",null,"Applies ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Deflate"},"DEFLATE")," to the given ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," and returns the compressed bytes as a Lua string, or ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," and an error message in case of failure. This method is identical to ",(0,r.kt)("a",{parentName:"p",href:"#deflate"},"Deflator.deflate")," in principle, but cannot be used to compress data in chunks."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"As a general guideline, you would use the different compression methods as follows:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"For maximum ease of use, simply call ",(0,r.kt)("a",{parentName:"li",href:"#compress"},"compress"),' for "one and done" synchronous compression (blocking)'),(0,r.kt)("li",{parentName:"ul"},"If you want to control the behavior of the compressor by passing flags to ",(0,r.kt)("inlineCode",{parentName:"li"},"miniz"),", use ",(0,r.kt)("a",{parentName:"li",href:"#deflate-1"},"deflate")," instead (blocking)"),(0,r.kt)("li",{parentName:"ul"},"Using an ",(0,r.kt)("a",{parentName:"li",href:"#deflator"},"Deflator")," allows compressing chunks as they come in, i.e., work asynchronously (non-blocking)")),(0,r.kt)("p",{parentName:"admonition"},"While you don't need to worry about buffer allocation with either of these, the performance characteristics may still differ.")),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"input",type:"string",mdxType:"Parameter"}),(0,r.kt)(c,{name:"compressionLevel",type:"number",optional:!0,mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"compressedInput",type:"string",mdxType:"Return"}))),(0,r.kt)("h3",{id:"deflate-1"},"deflate"),(0,r.kt)("p",null,"Applies ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Deflate"},"DEFLATE")," to the given ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," and returns the decompressed bytes, or ",(0,r.kt)("inlineCode",{parentName:"p"},'""')," in case of failure."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"flags")," passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"miniz")," control the behavior of the compressor."),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"input",type:"string",mdxType:"Parameter"}),(0,r.kt)(c,{name:"flags",type:"number",optional:!0,mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"decompressedInput",type:"string",mdxType:"Return"}))),(0,r.kt)("h3",{id:"inflate-1"},"inflate"),(0,r.kt)("p",null,"Applies ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Deflate#Decoder/decompressor"},"INFLATE")," to the given (DEFLATE-compressed) ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," and returns the decompressed bytes, or ",(0,r.kt)("inlineCode",{parentName:"p"},'""')," in case of failure."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"flags")," passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"miniz")," control the behavior of the decompressor."),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"input",type:"string",mdxType:"Parameter"}),(0,r.kt)(c,{name:"flags",type:"number",optional:!0,mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"decompressedInput",type:"string",mdxType:"Return"}))),(0,r.kt)("h3",{id:"last_error"},"last_error"),(0,r.kt)("p",null,"Returns the last compression or decompression error (as a human-readable string) if any was encountered, or ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," otherwise."),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"errorString",type:"string",optional:!0,mdxType:"Return"}))),(0,r.kt)("h3",{id:"new_deflator"},"new_deflator"),(0,r.kt)("p",null,"Creates a new ",(0,r.kt)("a",{parentName:"p",href:"#deflator"},"Deflator")," object and returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"userdata")," reference to it. If you set ",(0,r.kt)("inlineCode",{parentName:"p"},"compressionLevel"),", it must be a valid value (0 to 9)."),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"compressionLevel",type:"number",optional:!0,mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"deflator",type:"Deflator",mdxType:"Return"}))),(0,r.kt)("h3",{id:"new_inflator"},"new_inflator"),(0,r.kt)("p",null,"Creates a new ",(0,r.kt)("a",{parentName:"p",href:"#inflator"},"Inflator")," object and returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"userdata")," reference to it."),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"inflator",type:"Inflator",mdxType:"Return"}))),(0,r.kt)("h3",{id:"new_reader"},"new_reader"),(0,r.kt)("p",null,"Creates a new ZIP file reader for the given ",(0,r.kt)("inlineCode",{parentName:"p"},"fileSystemPath"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"flags")," passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"miniz")," can control the way that the archive is read. This method will automatically load the ZIP file from disk and attempt to decode it."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This function is suitable if loading the entire file into memory is acceptable. Use a ",(0,r.kt)("a",{parentName:"p",href:"#deflator"},"deflator")," for streaming.")),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," and an error message in case of failure. Otherwise the ZIP ",(0,r.kt)("a",{parentName:"p",href:"#ZipFileReader"},"reader")," should be ready to use."),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"fileSystemPath",type:"string",mdxType:"Parameter"}),(0,r.kt)(c,{name:"flags",type:"number",optional:!0,mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"reader",type:"ZipFileReader",optional:!0,mdxType:"Return"}),(0,r.kt)(f,{name:"errorMessage",type:"string",optional:!0,mdxType:"Return"}))),(0,r.kt)("h3",{id:"new_reader_memory"},"new_reader_memory"),(0,r.kt)("p",null,"Creates a new ZIP file reader for the given ",(0,r.kt)("inlineCode",{parentName:"p"},"fileContents"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"flags")," passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"miniz")," can control the way that the archive is read. You must handle reading the file from disk yourself, however you see fit."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This function is suitable if loading the entire file into memory is acceptable. Use a ",(0,r.kt)("a",{parentName:"p",href:"#deflator"},"deflator")," for streaming.")),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," and an error message in case of failure. Otherwise the ZIP ",(0,r.kt)("a",{parentName:"p",href:"#ZipFileReader"},"reader")," should be ready to use."),(0,r.kt)(u,{since:"v0.0.20",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"fileContents",type:"string",mdxType:"Parameter"}),(0,r.kt)(c,{name:"flags",type:"number",optional:!0,mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"reader",type:"ZipFileReader",optional:!0,mdxType:"Return"}),(0,r.kt)(f,{name:"errorMessage",type:"string",optional:!0,mdxType:"Return"}))),(0,r.kt)("h3",{id:"new_writer"},"new_writer"),(0,r.kt)("p",null,"Creates a new ZIP file writer for the given ",(0,r.kt)("inlineCode",{parentName:"p"},"fileSystemPath"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"flags")," passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"miniz")," can control the way that the archive is written."),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"fileSystemPath",type:"string",mdxType:"Parameter"}),(0,r.kt)(c,{name:"flags",type:"number",optional:!0,mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"writer",type:"ZipFileWriter",mdxType:"Return"}))),(0,r.kt)("h3",{id:"uncompress"},"uncompress"),(0,r.kt)("p",null,"Applies ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Deflate#Decoder/decompressor"},"INFLATE")," to the given (DEFLATE-compressed) ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," and returns the decompressed bytes as a Lua string, or ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," and an error message in case of failure. This method is identical to ",(0,r.kt)("a",{parentName:"p",href:"#inflate"},"Inflator.inflate")," in principle, but cannot be used to decompress data in chunks."),(0,r.kt)("p",null,"For optimization purposes, you can configure an ",(0,r.kt)("inlineCode",{parentName:"p"},"initialOutputBufferSize")," (in bytes). The decompressor will otherwise double the buffer whenever it needs more space, until decompression has finished or the maximum integer size of the platform has been reached."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"As a general guideline, you would use the different decompression methods as follows:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"For maximum ease of use, simply call ",(0,r.kt)("a",{parentName:"li",href:"#uncompress"},"uncompress"),' for "one and done" synchronous decompression (blocking)'),(0,r.kt)("li",{parentName:"ul"},"If you want to control the behavior of the decompressor by passing flags to ",(0,r.kt)("inlineCode",{parentName:"li"},"miniz"),", use ",(0,r.kt)("a",{parentName:"li",href:"#inflate-1"},"inflate")," instead (blocking)"),(0,r.kt)("li",{parentName:"ul"},"Using an ",(0,r.kt)("a",{parentName:"li",href:"#inflator"},"Inflator")," allows compressing chunks as they come in, i.e., work asynchronously (non-blocking)")),(0,r.kt)("p",{parentName:"admonition"},"While you don't need to worry about buffer allocation with either of these, the performance characteristics may still differ.")),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(k,{mdxType:"Parameters"},(0,r.kt)(c,{name:"input",type:"string",mdxType:"Parameter"}),(0,r.kt)(c,{name:"initialOutputBufferSize",type:"number",optional:!0,mdxType:"Parameter"})),(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"decompressedInput",type:"string",mdxType:"Return"}))),(0,r.kt)("h3",{id:"version"},"version"),(0,r.kt)("p",null,"Returns the version number of the embedded ",(0,r.kt)("inlineCode",{parentName:"p"},"miniz")," library as a Lua string."),(0,r.kt)(u,{since:"v0.0.5",mdxType:"Function"},(0,r.kt)(y,{mdxType:"Returns"},(0,r.kt)(f,{name:"version",type:"string",mdxType:"Return"}))),(0,r.kt)("h2",{id:"changelog"},"Changelog"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Version"),(0,r.kt)("th",{parentName:"tr",align:"center"},"What happened?"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"v0.0.20"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Added ",(0,r.kt)("inlineCode",{parentName:"td"},"new_reader_memory"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"v0.0.5"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Initial release")))))}b.isMDXComponent=!0}}]);