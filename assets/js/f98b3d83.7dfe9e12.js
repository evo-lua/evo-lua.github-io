"use strict";(self.webpackChunkevo_lua_github_io=self.webpackChunkevo_lua_github_io||[]).push([[3020],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>v});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},p="mdxType",_={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=u(n),c=r,v=p["".concat(s,".").concat(c)]||p[c]||_[c]||a;return n?i.createElement(v,o(o({ref:t},d),{},{components:n})):i.createElement(v,o({ref:t},d))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5100:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var i=n(7462),r=(n(7294),n(3905));const a={},o="interop",l={unversionedId:"references/api/bindings/interop",id:"references/api/bindings/interop",title:"interop",description:"Interoperability helpers for cross-language event handling",source:"@site/docs/references/api/bindings/interop.md",sourceDirName:"references/api/bindings",slug:"/references/api/bindings/interop",permalink:"/docs/references/api/bindings/interop",draft:!1,editUrl:"https://github.com/evo-lua/evo-lua.github.io/edit/main/docs/references/api/bindings/interop.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"inspect",permalink:"/docs/references/api/bindings/inspect"},next:{title:"json",permalink:"/docs/references/api/bindings/json"}},s={},u=[{value:"Status",id:"status",level:2},{value:"Availability",id:"availability",level:2},{value:"Constants",id:"constants",level:2},{value:"Event Details",id:"event-details",level:2},{value:"Fields",id:"fields",level:2},{value:"cdefs",id:"cdefs",level:3},{value:"bindings",id:"bindings",level:3},{value:"Functions",id:"functions",level:2},{value:"initialize",id:"initialize",level:3},{value:"Native Bindings",id:"native-bindings",level:2},{value:"queue_create",id:"queue_create",level:3},{value:"queue_destroy",id:"queue_destroy",level:3},{value:"queue_pop_event",id:"queue_pop_event",level:3},{value:"queue_push_event",id:"queue_push_event",level:3},{value:"queue_size",id:"queue_size",level:3},{value:"Changelog",id:"changelog",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},p=d("FFI"),_=d("Experimental"),c={toc:u},v="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(v,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interop"},"interop"),(0,r.kt)("p",null,"Interoperability helpers for cross-language event handling"),(0,r.kt)(p,{mdxType:"FFI"}),(0,r.kt)("h2",{id:"status"},"Status"),(0,r.kt)(_,{mdxType:"Experimental"}),(0,r.kt)("h2",{id:"availability"},"Availability"),(0,r.kt)("p",null,"This module is preloaded. You can simply ",(0,r.kt)("inlineCode",{parentName:"p"},"require")," it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local interop = require("interop")\n')),(0,r.kt)("h2",{id:"constants"},"Constants"),(0,r.kt)("p",null,"You can access the following ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," values via the global ",(0,r.kt)("inlineCode",{parentName:"p"},"ffi.C")," namespace:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"enum {\n    UNKNOWN_ERROR = 0,\n    ERROR_POPPING_EMPTY_QUEUE = 1,\n};\n\ntypedef enum {\n    ERROR_EVENT,\n    WINDOW_MOVE_EVENT,\n    WINDOW_RESIZE_EVENT,\n    WINDOW_CLOSE_EVENT,\n    FRAMEBUFFER_RESIZE_EVENT,\n    CONTENT_SCALE_EVENT,\n    WINDOW_REFRESH_EVENT,\n    WINDOW_FOCUS_EVENT,\n    WINDOW_ICONIFY_EVENT,\n    WINDOW_MAXIMIZE_EVENT,\n    MOUSE_BUTTON_EVENT,\n    CURSOR_MOVE_EVENT,\n    CURSOR_ENTER_EVENT,\n    SCROLL_EVENT,\n    KEYBOARD_EVENT,\n    CHARACTER_INPUT_EVENT\n} EventType;\n")),(0,r.kt)("h2",{id:"event-details"},"Event Details"),(0,r.kt)("p",null,"Each event has a unique payload structure that is passed to Lua as a ",(0,r.kt)("inlineCode",{parentName:"p"},"cdata")," value when popping from the queue:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct server_status_event_t {\n    int type;\n    bool listen_status;\n    int port;\n} server_status_event_t;\n\ntypedef struct window_move_event_t {\n    int type;\n    int x;\n    int y;\n} window_move_event_t;\n\ntypedef struct window_resize_event_t {\n    int type;\n    int width;\n    int height;\n} window_resize_event_t;\n\ntypedef struct window_close_event_t {\n    int type;\n} window_close_event_t;\n\ntypedef struct framebuffer_resize_event_t {\n    int type;\n    int width;\n    int height;\n} framebuffer_resize_event_t;\n\ntypedef struct content_scale_event_t {\n    int type;\n    float x;\n    float y;\n} content_scale_event_t;\n\ntypedef struct window_refresh_event_t {\n    int type;\n} window_refresh_event_t;\n\ntypedef struct window_focus_event_t {\n    int type;\n    int focused;\n} window_focus_event_t;\n\ntypedef struct window_iconify_event_t {\n    int type;\n    int iconified;\n} window_iconify_event_t;\n\ntypedef struct window_maximize_event_t {\n    int type;\n    int maximized;\n} window_maximize_event_t;\n\ntypedef struct mouse_button_event_t {\n    int type;\n    int button;\n    int action;\n    int mods;\n} mouse_button_event_t;\n\ntypedef struct cursor_move_event_t {\n    int type;\n    double x;\n    double y;\n} cursor_move_event_t;\n\ntypedef struct cursor_enter_event_t {\n    int type;\n    int entered;\n} cursor_enter_event_t;\n\ntypedef struct scroll_event_t {\n    int type;\n    double x;\n    double y;\n} scroll_event_t;\n\ntypedef struct key_event_t {\n    int type;\n    int key;\n    int scancode;\n    int action;\n    int mods;\n} key_event_t;\n\ntypedef struct character_input_event_t {\n    int type;\n    unsigned int codepoint;\n} character_input_event_t;\n\ntypedef struct error_event_t {\n    int type;\n    int code;\n} error_event_t;\n\ntypedef union deferred_event_t {\n    error_event_t error_details;\n    window_move_event_t window_move_details;\n    window_resize_event_t window_resize_details;\n    window_close_event_t window_close_details;\n    framebuffer_resize_event_t framebuffer_resize_details;\n    content_scale_event_t content_scale_details;\n    window_refresh_event_t window_refresh_details;\n    window_focus_event_t window_focus_details;\n    window_iconify_event_t window_iconify_details;\n    window_maximize_event_t window_maximize_details;\n    mouse_button_event_t mouse_button_details;\n    cursor_move_event_t cursor_move_details;\n    cursor_enter_event_t cursor_enter_details;\n    scroll_event_t scroll_details;\n    key_event_t key_details;\n    character_input_event_t character_input_details;\n} deferred_event_t;\n")),(0,r.kt)("p",null,"You must then use the event's ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," value to determine the exact payload data (using ",(0,r.kt)("inlineCode",{parentName:"p"},"ffi.cast")," and the above type definitions)."),(0,r.kt)("h2",{id:"fields"},"Fields"),(0,r.kt)("h3",{id:"cdefs"},"cdefs"),(0,r.kt)("p",null,"A string representing the C type definitions that were used to load the FFI bindings. Do not attempt to ",(0,r.kt)("inlineCode",{parentName:"p"},"ffi.load")," them manually."),(0,r.kt)("h3",{id:"bindings"},"bindings"),(0,r.kt)("p",null,"A pointer to the statically-loaded exports table that exposes the bound functions to Lua. For more details, see ",(0,r.kt)("a",{parentName:"p",href:"/docs/background-information/luajit/static-ffi-bindings"},"this note"),"."),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"initialize"},"initialize"),(0,r.kt)("p",null,"Initializes the bindings by loading the ",(0,r.kt)("a",{parentName:"p",href:"#cdefs"},"C type definitions"),". Automatically called by the runtime when it sets up the Lua environment"),(0,r.kt)("h2",{id:"native-bindings"},"Native Bindings"),(0,r.kt)("p",null,"All C functions listed here can be accessed via ",(0,r.kt)("inlineCode",{parentName:"p"},"interop.bindings")," and must be called with the appropriate ",(0,r.kt)("inlineCode",{parentName:"p"},"cdata")," values."),(0,r.kt)("h3",{id:"queue_create"},"queue_create"),(0,r.kt)("p",null,"Creates a new C++ ",(0,r.kt)("inlineCode",{parentName:"p"},"std::queue")," that can hold deferred runtime events. The returned object is a handle that you can pass to native APIs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"deferred_event_queue_t (*queue_create)(void);\n")),(0,r.kt)("h3",{id:"queue_destroy"},"queue_destroy"),(0,r.kt)("p",null,"Destroys the queue and frees the allocated memory. Stored events will be destroyed, as well."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void (*queue_destroy)(deferred_event_queue_t);\n")),(0,r.kt)("h3",{id:"queue_pop_event"},"queue_pop_event"),(0,r.kt)("p",null,"Removes the next deferred event from the queue and returns it. If the queue was empty, you'll get an invalid ",(0,r.kt)("inlineCode",{parentName:"p"},"ERROR_EVENT")," type event."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"deferred_event_t (*queue_pop_event)(deferred_event_queue_t);\n")),(0,r.kt)("h3",{id:"queue_push_event"},"queue_push_event"),(0,r.kt)("p",null,"Inserts the given ",(0,r.kt)("inlineCode",{parentName:"p"},"event")," at the back of the queue, resizing it as necessary. Events are usually created in the runtime's opaque C++ layer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool (*queue_push_event)(deferred_event_queue_t, deferred_event_t event);\n")),(0,r.kt)("h3",{id:"queue_size"},"queue_size"),(0,r.kt)("p",null,"Returns the number of deferred events currently saved in the queue. You can pop each event individually and then handle it from Lua."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"size_t (*queue_size)(deferred_event_queue_t);\n")),(0,r.kt)("h2",{id:"changelog"},"Changelog"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Version"),(0,r.kt)("th",{parentName:"tr",align:"center"},"What happened?"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"v0.0.6"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Initial release")))))}f.isMDXComponent=!0}}]);