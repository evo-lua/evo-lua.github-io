"use strict";(self.webpackChunkevo_lua_github_io=self.webpackChunkevo_lua_github_io||[]).push([[1328],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(f,l(l({ref:t},u),{},{components:n})):a.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3275:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={},l="Static FFI Bindings",o={unversionedId:"background-information/luajit/static-ffi-bindings",id:"background-information/luajit/static-ffi-bindings",title:"Static FFI Bindings",description:"How statically-linked libraries are loaded into the Lua environment",source:"@site/docs/background-information/luajit/static-ffi-bindings.md",sourceDirName:"background-information/luajit",slug:"/background-information/luajit/static-ffi-bindings",permalink:"/docs/background-information/luajit/static-ffi-bindings",draft:!1,editUrl:"https://github.com/evo-lua/evo-lua.github.io/edit/main/docs/background-information/luajit/static-ffi-bindings.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"LuaJIT Notes",permalink:"/docs/category/luajit-notes"},next:{title:"The Evo Philosophy",permalink:"/docs/background-information/the-evo-philosophy"}},s={},c=[{value:"Calling C Functions From a Static Library",id:"calling-c-functions-from-a-static-library",level:2},{value:"Relevance and Advantages",id:"relevance-and-advantages",level:2},{value:"Alternative Approaches",id:"alternative-approaches",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"static-ffi-bindings"},"Static FFI Bindings"),(0,r.kt)("p",null,"How statically-linked libraries are loaded into the Lua environment"),(0,r.kt)("h2",{id:"calling-c-functions-from-a-static-library"},"Calling C Functions From a Static Library"),(0,r.kt)("p",null,"First, create a struct with function pointers:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"struct myfuncs {\n    int (*some_function_name)(int a, int b);\n    void *(*another_function_name)(char *x, const char *y);\n    //...\n};\n")),(0,r.kt)("p",null,"Then make a static struct on the C side and fill it with the\nfunction pointers. Make a lightuserdata object from the struct\npointer with ",(0,r.kt)("inlineCode",{parentName:"p"},"lua_pushlightuserdata()"),"."),(0,r.kt)("p",null,"Pass that Lua object to\nLuaJIT, e.g. as an argument of ",(0,r.kt)("inlineCode",{parentName:"p"},"lua_call"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"lua_pcall")," or via a global."),(0,r.kt)("p",null,"On the LuaJIT side, declare the identical struct with ",(0,r.kt)("inlineCode",{parentName:"p"},"ffi.cdef"),".\nThen cast that lightuserdata argument back to the struct pointer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'    -- Assumes the lightuserdata is in the variable ud.\n    myfuncs = ffi.cast("struct myfuncs *", ud)\n')),(0,r.kt)("p",null,"All of the above should only be done once at initialization."),(0,r.kt)("p",null,"Now, whenever you want to call one of these functions via the FFI,\nsimply reference them from the struct. E.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"    -- That's really an FFI call.\n    local y = myfuncs.some_function_name(1, 2)\n")),(0,r.kt)("p",null,"Source: ",(0,r.kt)("a",{parentName:"p",href:"https://www.freelists.org/post/luajit/How-to-call-functions-from-a-static-library-in-Luajit,11"},"Mike Pall, LuaJIT mailing list")," (archived here, with minor formatting edits, in case it becomes unavailable)"),(0,r.kt)("h2",{id:"relevance-and-advantages"},"Relevance and Advantages"),(0,r.kt)("p",null,"The method described here is how all statically-linked library APIs are bound to Lua. Why do it this way?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It's faster than using the regular C API, more readable, and less error-prone too (no stack mis-alignment errors...)"),(0,r.kt)("li",{parentName:"ul"},"This is important if new libraries need to be added and Lua bindings either don't exist or aren't well maintained"),(0,r.kt)("li",{parentName:"ul"},"The FFI generally requires less glue code to be written when interfaces change, making maintenance easier")),(0,r.kt)("p",null,"Because the approach may seem a bit convoluted at first, this note exists to provide the necessary background."),(0,r.kt)("h2",{id:"alternative-approaches"},"Alternative Approaches"),(0,r.kt)("p",null,"There are several other ways that functionality from native libraries could be made available to Lua:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Regular Lua-C-API bindings (does not scale, cumbersome and error-prone)"),(0,r.kt)("li",{parentName:"ul"},"Rewrite in Lua entirely (usually not feasable, can also be slow depending on the algorithm)"),(0,r.kt)("li",{parentName:"ul"},"Shell out to a native host program (not usually portable, may invoke too much overhead at scale)"),(0,r.kt)("li",{parentName:"ul"},"Just use dynamically-linked libraries with ",(0,r.kt)("inlineCode",{parentName:"li"},"ffi.load()")," - this is indeed preferable IFF static linkage isn't desired")),(0,r.kt)("p",null,"Since LuaJIT is the only supported Lua engine, there's really no reason to use any of them (for embedded libraries)."))}p.isMDXComponent=!0}}]);