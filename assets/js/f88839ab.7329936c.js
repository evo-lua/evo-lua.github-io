"use strict";(self.webpackChunkevo_lua_github_io=self.webpackChunkevo_lua_github_io||[]).push([[320],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),g=a,d=m["".concat(u,".").concat(g)]||m[g]||p[g]||i;return n?r.createElement(d,o(o({ref:t},c),{},{components:n})):r.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5640:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={},o="Command-line Arguments",l={unversionedId:"how-to-guides/command-line-arguments",id:"how-to-guides/command-line-arguments",title:"Command-line Arguments",description:"Learn how to pass command-line arguments to your application",source:"@site/docs/how-to-guides/command-line-arguments.md",sourceDirName:"how-to-guides",slug:"/how-to-guides/command-line-arguments",permalink:"/docs/how-to-guides/command-line-arguments",draft:!1,editUrl:"https://github.com/evo-lua/evo-lua.github.io/edit/main/docs/how-to-guides/command-line-arguments.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Building from Source",permalink:"/docs/how-to-guides/building-from-source"},next:{title:"Background Information",permalink:"/docs/category/background-information"}},u={},s=[{value:"Forwarding CLI Arguments",id:"forwarding-cli-arguments",level:2},{value:"Receiving CLI Arguments",id:"receiving-cli-arguments",level:2},{value:"Accessing the C Arguments Vector",id:"accessing-the-c-arguments-vector",level:2},{value:"Accessing the Runtime Path",id:"accessing-the-runtime-path",level:2}],c={toc:s},m="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"command-line-arguments"},"Command-line Arguments"),(0,a.kt)("p",null,"Learn how to pass command-line arguments to your application"),(0,a.kt)("h2",{id:"forwarding-cli-arguments"},"Forwarding CLI Arguments"),(0,a.kt)("p",null,"You can provide additional arguments after the ",(0,a.kt)("inlineCode",{parentName:"p"},"--")," separator when invoking the runtime:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"evo myApp.lua -- cli args go here\n")),(0,a.kt)("p",null,"In this example, Evo itself will consume everything up until (and including) the ",(0,a.kt)("inlineCode",{parentName:"p"},"--")," and your app receives the rest."),(0,a.kt)("h2",{id:"receiving-cli-arguments"},"Receiving CLI Arguments"),(0,a.kt)("p",null,"Scripts can fetch the arguments added after ",(0,a.kt)("inlineCode",{parentName:"p"},"--")," via Lua's ",(0,a.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/5.2.html"},"varargs")," operator:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Example: Arguments passed through varargs" source=cli-app-args.lua',title:'"Example:',Arguments:!0,passed:!0,through:!0,'varargs"':!0,source:"cli-app-args.lua"},"")),(0,a.kt)("p",null,"Expected output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'Number of command-line arguments received:     4\nDumping command-line arguments...\n{ "cli", "args", "go", "here" }\nIterating over command-line arguments...\n1       cli\n2       args\n3       go\n4       here\n')),(0,a.kt)("h2",{id:"accessing-the-c-arguments-vector"},"Accessing the C Arguments Vector"),(0,a.kt)("p",null,"If you need the full ",(0,a.kt)("inlineCode",{parentName:"p"},"argv")," array as received by the runtime, read the standard global array ",(0,a.kt)("inlineCode",{parentName:"p"},"arg"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Example: Reading argv from Lua scripts" source=cli-global-arg.lua',title:'"Example:',Reading:!0,argv:!0,from:!0,Lua:!0,'scripts"':!0,source:"cli-global-arg.lua"},"")),(0,a.kt)("p",null,"This array includes all arguments, including those in front of the ",(0,a.kt)("inlineCode",{parentName:"p"},"--")," delimiter. Running the above:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"evo myApp.lua --main ignored.lua -- cli args go here\n")),(0,a.kt)("p",null,"The output shows the full list of arguments, including those already processed by the runtime:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'Number of command-line arguments received:     4\nDumping command line arguments (only those after the -- delimiter)...\n{ "cli", "args", "go", "here" }\nDumping command line arguments (the full C arguments vector)...\nFull arguments count:     8\n{ "myApp.lua", "--main", "ignored.lua", "--", "cli", "args", "go", "here" }\n')),(0,a.kt)("h2",{id:"accessing-the-runtime-path"},"Accessing the Runtime Path"),(0,a.kt)("p",null,"If you want to find out from where the interpreter is running, you can use libuv:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Example: Retrieving the executable name" source=uv-exepath.lua',title:'"Example:',Retrieving:!0,the:!0,executable:!0,'name"':!0,source:"uv-exepath.lua"},"")),(0,a.kt)("p",null,"The result will depend on where you've placed the ",(0,a.kt)("inlineCode",{parentName:"p"},"evo")," binary on your system:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"The executable running this script is located here:     C:\\evo-lua\\evo.exe\n")))}p.isMDXComponent=!0}}]);